//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace PlatformClient.PlatformChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PlatformChat.IPlatformChat", CallbackContract=typeof(PlatformClient.PlatformChat.IPlatformChatCallback))]
    public interface IPlatformChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IPlatformChat/Logon")]
        System.IAsyncResult BeginLogon(string user, System.AsyncCallback callback, object asyncState);
        
        void EndLogon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IPlatformChat/Leave")]
        System.IAsyncResult BeginLeave(string user, System.AsyncCallback callback, object asyncState);
        
        void EndLeave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IPlatformChat/Say")]
        System.IAsyncResult BeginSay(string smg, System.AsyncCallback callback, object asyncState);
        
        void EndSay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IPlatformChat/Whisper")]
        System.IAsyncResult BeginWhisper(string smg, string toUser, System.AsyncCallback callback, object asyncState);
        
        void EndWhisper(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlatformChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlatformChat/ReplyLogon")]
        void ReplyLogon(string user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlatformChat/CurrentUsers")]
        void CurrentUsers(System.Collections.Generic.List<string> users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlatformChat/ReplyLeave")]
        void ReplyLeave(string user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlatformChat/ReplySay")]
        void ReplySay(string user, string smg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlatformChat/ReplyWhisper")]
        void ReplyWhisper(string smg, string toUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlatformChatChannel : PlatformClient.PlatformChat.IPlatformChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlatformChatClient : System.ServiceModel.DuplexClientBase<PlatformClient.PlatformChat.IPlatformChat>, PlatformClient.PlatformChat.IPlatformChat {
        
        private BeginOperationDelegate onBeginLogonDelegate;
        
        private EndOperationDelegate onEndLogonDelegate;
        
        private System.Threading.SendOrPostCallback onLogonCompletedDelegate;
        
        private BeginOperationDelegate onBeginLeaveDelegate;
        
        private EndOperationDelegate onEndLeaveDelegate;
        
        private System.Threading.SendOrPostCallback onLeaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginSayDelegate;
        
        private EndOperationDelegate onEndSayDelegate;
        
        private System.Threading.SendOrPostCallback onSayCompletedDelegate;
        
        private BeginOperationDelegate onBeginWhisperDelegate;
        
        private EndOperationDelegate onEndWhisperDelegate;
        
        private System.Threading.SendOrPostCallback onWhisperCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PlatformChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlatformChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlatformChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlatformChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlatformChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public PlatformChatClient(string endpointConfigurationName) : 
                this(new PlatformChatClientCallback(), endpointConfigurationName) {
        }
        
        private PlatformChatClient(PlatformChatClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public PlatformChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new PlatformChatClientCallback(), binding, remoteAddress) {
        }
        
        private PlatformChatClient(PlatformChatClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public PlatformChatClient() : 
                this(new PlatformChatClientCallback()) {
        }
        
        private PlatformChatClient(PlatformChatClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogonCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LeaveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SayCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WhisperCompleted;
        
        public event System.EventHandler<ReplyLogonReceivedEventArgs> ReplyLogonReceived;
        
        public event System.EventHandler<CurrentUsersReceivedEventArgs> CurrentUsersReceived;
        
        public event System.EventHandler<ReplyLeaveReceivedEventArgs> ReplyLeaveReceived;
        
        public event System.EventHandler<ReplySayReceivedEventArgs> ReplySayReceived;
        
        public event System.EventHandler<ReplyWhisperReceivedEventArgs> ReplyWhisperReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PlatformClient.PlatformChat.IPlatformChat.BeginLogon(string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogon(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PlatformClient.PlatformChat.IPlatformChat.EndLogon(System.IAsyncResult result) {
            base.Channel.EndLogon(result);
        }
        
        private System.IAsyncResult OnBeginLogon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string user = ((string)(inValues[0]));
            return ((PlatformClient.PlatformChat.IPlatformChat)(this)).BeginLogon(user, callback, asyncState);
        }
        
        private object[] OnEndLogon(System.IAsyncResult result) {
            ((PlatformClient.PlatformChat.IPlatformChat)(this)).EndLogon(result);
            return null;
        }
        
        private void OnLogonCompleted(object state) {
            if ((this.LogonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogonAsync(string user) {
            this.LogonAsync(user, null);
        }
        
        public void LogonAsync(string user, object userState) {
            if ((this.onBeginLogonDelegate == null)) {
                this.onBeginLogonDelegate = new BeginOperationDelegate(this.OnBeginLogon);
            }
            if ((this.onEndLogonDelegate == null)) {
                this.onEndLogonDelegate = new EndOperationDelegate(this.OnEndLogon);
            }
            if ((this.onLogonCompletedDelegate == null)) {
                this.onLogonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogonCompleted);
            }
            base.InvokeAsync(this.onBeginLogonDelegate, new object[] {
                        user}, this.onEndLogonDelegate, this.onLogonCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PlatformClient.PlatformChat.IPlatformChat.BeginLeave(string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLeave(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PlatformClient.PlatformChat.IPlatformChat.EndLeave(System.IAsyncResult result) {
            base.Channel.EndLeave(result);
        }
        
        private System.IAsyncResult OnBeginLeave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string user = ((string)(inValues[0]));
            return ((PlatformClient.PlatformChat.IPlatformChat)(this)).BeginLeave(user, callback, asyncState);
        }
        
        private object[] OnEndLeave(System.IAsyncResult result) {
            ((PlatformClient.PlatformChat.IPlatformChat)(this)).EndLeave(result);
            return null;
        }
        
        private void OnLeaveCompleted(object state) {
            if ((this.LeaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LeaveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LeaveAsync(string user) {
            this.LeaveAsync(user, null);
        }
        
        public void LeaveAsync(string user, object userState) {
            if ((this.onBeginLeaveDelegate == null)) {
                this.onBeginLeaveDelegate = new BeginOperationDelegate(this.OnBeginLeave);
            }
            if ((this.onEndLeaveDelegate == null)) {
                this.onEndLeaveDelegate = new EndOperationDelegate(this.OnEndLeave);
            }
            if ((this.onLeaveCompletedDelegate == null)) {
                this.onLeaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLeaveCompleted);
            }
            base.InvokeAsync(this.onBeginLeaveDelegate, new object[] {
                        user}, this.onEndLeaveDelegate, this.onLeaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PlatformClient.PlatformChat.IPlatformChat.BeginSay(string smg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSay(smg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PlatformClient.PlatformChat.IPlatformChat.EndSay(System.IAsyncResult result) {
            base.Channel.EndSay(result);
        }
        
        private System.IAsyncResult OnBeginSay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string smg = ((string)(inValues[0]));
            return ((PlatformClient.PlatformChat.IPlatformChat)(this)).BeginSay(smg, callback, asyncState);
        }
        
        private object[] OnEndSay(System.IAsyncResult result) {
            ((PlatformClient.PlatformChat.IPlatformChat)(this)).EndSay(result);
            return null;
        }
        
        private void OnSayCompleted(object state) {
            if ((this.SayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SayAsync(string smg) {
            this.SayAsync(smg, null);
        }
        
        public void SayAsync(string smg, object userState) {
            if ((this.onBeginSayDelegate == null)) {
                this.onBeginSayDelegate = new BeginOperationDelegate(this.OnBeginSay);
            }
            if ((this.onEndSayDelegate == null)) {
                this.onEndSayDelegate = new EndOperationDelegate(this.OnEndSay);
            }
            if ((this.onSayCompletedDelegate == null)) {
                this.onSayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSayCompleted);
            }
            base.InvokeAsync(this.onBeginSayDelegate, new object[] {
                        smg}, this.onEndSayDelegate, this.onSayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PlatformClient.PlatformChat.IPlatformChat.BeginWhisper(string smg, string toUser, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWhisper(smg, toUser, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PlatformClient.PlatformChat.IPlatformChat.EndWhisper(System.IAsyncResult result) {
            base.Channel.EndWhisper(result);
        }
        
        private System.IAsyncResult OnBeginWhisper(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string smg = ((string)(inValues[0]));
            string toUser = ((string)(inValues[1]));
            return ((PlatformClient.PlatformChat.IPlatformChat)(this)).BeginWhisper(smg, toUser, callback, asyncState);
        }
        
        private object[] OnEndWhisper(System.IAsyncResult result) {
            ((PlatformClient.PlatformChat.IPlatformChat)(this)).EndWhisper(result);
            return null;
        }
        
        private void OnWhisperCompleted(object state) {
            if ((this.WhisperCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WhisperCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WhisperAsync(string smg, string toUser) {
            this.WhisperAsync(smg, toUser, null);
        }
        
        public void WhisperAsync(string smg, string toUser, object userState) {
            if ((this.onBeginWhisperDelegate == null)) {
                this.onBeginWhisperDelegate = new BeginOperationDelegate(this.OnBeginWhisper);
            }
            if ((this.onEndWhisperDelegate == null)) {
                this.onEndWhisperDelegate = new EndOperationDelegate(this.OnEndWhisper);
            }
            if ((this.onWhisperCompletedDelegate == null)) {
                this.onWhisperCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWhisperCompleted);
            }
            base.InvokeAsync(this.onBeginWhisperDelegate, new object[] {
                        smg,
                        toUser}, this.onEndWhisperDelegate, this.onWhisperCompletedDelegate, userState);
        }
        
        private void OnReplyLogonReceived(object state) {
            if ((this.ReplyLogonReceived != null)) {
                object[] results = ((object[])(state));
                this.ReplyLogonReceived(this, new ReplyLogonReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnCurrentUsersReceived(object state) {
            if ((this.CurrentUsersReceived != null)) {
                object[] results = ((object[])(state));
                this.CurrentUsersReceived(this, new CurrentUsersReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReplyLeaveReceived(object state) {
            if ((this.ReplyLeaveReceived != null)) {
                object[] results = ((object[])(state));
                this.ReplyLeaveReceived(this, new ReplyLeaveReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReplySayReceived(object state) {
            if ((this.ReplySayReceived != null)) {
                object[] results = ((object[])(state));
                this.ReplySayReceived(this, new ReplySayReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReplyWhisperReceived(object state) {
            if ((this.ReplyWhisperReceived != null)) {
                object[] results = ((object[])(state));
                this.ReplyWhisperReceived(this, new ReplyWhisperReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (((((this.ReplyLogonReceived != null) 
                        || (this.CurrentUsersReceived != null)) 
                        || (this.ReplyLeaveReceived != null)) 
                        || (this.ReplySayReceived != null)) 
                        || (this.ReplyWhisperReceived != null)))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PlatformClient.PlatformChat.IPlatformChat CreateChannel() {
            return new PlatformChatClientChannel(this);
        }
        
        private class PlatformChatClientCallback : object, IPlatformChatCallback {
            
            private PlatformChatClient proxy;
            
            public void Initialize(PlatformChatClient proxy) {
                this.proxy = proxy;
            }
            
            public void ReplyLogon(string user) {
                this.proxy.OnReplyLogonReceived(new object[] {
                            user});
            }
            
            public void CurrentUsers(System.Collections.Generic.List<string> users) {
                this.proxy.OnCurrentUsersReceived(new object[] {
                            users});
            }
            
            public void ReplyLeave(string user) {
                this.proxy.OnReplyLeaveReceived(new object[] {
                            user});
            }
            
            public void ReplySay(string user, string smg) {
                this.proxy.OnReplySayReceived(new object[] {
                            user,
                            smg});
            }
            
            public void ReplyWhisper(string smg, string toUser) {
                this.proxy.OnReplyWhisperReceived(new object[] {
                            smg,
                            toUser});
            }
        }
        
        private class PlatformChatClientChannel : ChannelBase<PlatformClient.PlatformChat.IPlatformChat>, PlatformClient.PlatformChat.IPlatformChat {
            
            public PlatformChatClientChannel(System.ServiceModel.DuplexClientBase<PlatformClient.PlatformChat.IPlatformChat> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLogon(string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("Logon", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogon(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Logon", _args, result);
            }
            
            public System.IAsyncResult BeginLeave(string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("Leave", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLeave(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Leave", _args, result);
            }
            
            public System.IAsyncResult BeginSay(string smg, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = smg;
                System.IAsyncResult _result = base.BeginInvoke("Say", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSay(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Say", _args, result);
            }
            
            public System.IAsyncResult BeginWhisper(string smg, string toUser, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = smg;
                _args[1] = toUser;
                System.IAsyncResult _result = base.BeginInvoke("Whisper", _args, callback, asyncState);
                return _result;
            }
            
            public void EndWhisper(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Whisper", _args, result);
            }
        }
    }
    
    public class ReplyLogonReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReplyLogonReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string user {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class CurrentUsersReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CurrentUsersReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> users {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    public class ReplyLeaveReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReplyLeaveReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string user {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class ReplySayReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReplySayReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string user {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string smg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public class ReplyWhisperReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReplyWhisperReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string smg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string toUser {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}
